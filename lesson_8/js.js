"use strict";
// 2. Не выполняя кода, ответить, что выведет браузер и почему.

/**
 * При использовании объявления переменных в разделе "var" есть
 * особенность всплытия в начало скрипта, поэтому "a = 1", переменная
 * "a" будет входить в глобальный объект "window" JS, но т.к.
 * используется отрицание "!", то результат будет undefined.
 *
 */
if (!("a" in window)) {
    var a = 1;
}
alert(a);
// ==============

/**
 * Будет ошибка, т.к. переменная "a" не объявлена
 * @param x
 */
var b = function a(x) {
    x && a(--x);
};
alert(a);
// ==============
/**
 * Думаю будет undefined, т.к. объявленная переменная "a" создана но ничего ей не присвоено,
 * вызова функции нет, только используется имя функции при выводе в "alert"
 *
 * @param x
 * @returns {number}
 */
function a(x) {
    return x * 2;
}
var a;
alert(a);
// ==============
/**
 * 3-й аргумент в функции поменяет своё значение с 3 на 10.
 * Объект arguments — это локальная переменная, доступная внутри любой
 * (нестрелочной) функции. Объект arguments позволяет ссылаться на аргументы
 * функции внутри неё.
 * @param x
 * @param y
 * @param a
 */
function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);
// ==============
/**
 * Метод call() вызывает функцию с указанным значением this и индивидуально
 * предоставленными аргументами.
 * Вернёт ссылку this
 */
function a() {
    alert(this);
}
a.call(null);
